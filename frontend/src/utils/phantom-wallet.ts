import { Address } from '@solana/addresses';

// Service para gerenciar conex√£o com Phantom usando padr√µes modernos
export class PhantomWalletService {
    async isPhantomInstalled(): Promise<boolean> {
        return !!(window.solana?.isPhantom);
    }

    async connect(): Promise<Address> {
        console.log('üîÑ Iniciando conex√£o com Phantom...');
        
        if (!window.solana) {
            console.error('‚ùå window.solana n√£o encontrado');
            throw new Error('Phantom wallet n√£o detectado. Instale em https://phantom.app');
        }

        if (!window.solana.isPhantom) {
            console.error('‚ùå window.solana.isPhantom √© false');
            throw new Error('Phantom wallet n√£o √© v√°lido');
        }

        console.log('‚úÖ Phantom detectado, solicitando conex√£o...');
        
        try {
            const response = await window.solana.connect();
            console.log('‚úÖ Phantom conectado:', response.publicKey.toString());
            return response.publicKey.toString() as Address;
        } catch (error) {
            console.error('‚ùå Erro na conex√£o:', error);
            if (error.code === 4001) {
                throw new Error('Conex√£o rejeitada pelo usu√°rio');
            }
            throw new Error('Falha ao conectar: ' + error.message);
        }
    }

    async disconnect(): Promise<void> {
        if (window.solana?.disconnect) {
            await window.solana.disconnect();
        }
    }

    async signTransaction(transaction: any): Promise<any> {
        console.log('üîÑ Iniciando assinatura de transa√ß√£o...');
        
        if (!window.solana) {
            console.error('‚ùå window.solana n√£o dispon√≠vel');
            throw new Error('Phantom wallet n√£o est√° dispon√≠vel');
        }

        if (!window.solana.signTransaction) {
            console.error('‚ùå signTransaction n√£o dispon√≠vel');
            throw new Error('Carteira n√£o suporta assinatura de transa√ß√µes');
        }

        if (!window.solana.isConnected) {
            console.error('‚ùå Phantom n√£o est√° conectado');
            throw new Error('Phantom n√£o est√° conectado. Conecte primeiro.');
        }

        console.log('üìù Solicitando assinatura ao Phantom...');
        
        try {
            const signedTx = await window.solana.signTransaction(transaction);
            console.log('‚úÖ Transa√ß√£o assinada com sucesso');
            return signedTx;
        } catch (error) {
            console.error('‚ùå Erro na assinatura:', error);
            if (error.code === 4001) {
                throw new Error('Assinatura rejeitada pelo usu√°rio');
            }
            throw new Error('Falha na assinatura: ' + error.message);
        }
    }

    onAccountChanged(callback: (_publicKey: Address | null) => void): void {
        window.solana?.on?.('accountChanged', (_publicKey: any) => {
            callback(_publicKey ? _publicKey.toString() as Address : null);
        });
    }

    onConnect(callback: (_publicKey: Address) => void): void {
        window.solana?.on?.('connect', (_publicKey: any) => {
            callback(_publicKey.toString() as Address);
        });
    }

    onDisconnect(callback: () => void): void {
        window.solana?.on?.('disconnect', callback);
    }

    isConnected(): boolean {
        return window.solana?.isConnected || false;
    }

    getPublicKey(): Address | null {
        return window.solana?.publicKey?.toString() as Address || null;
    }
}

// Inst√¢ncia singleton
export const phantomWallet = new PhantomWalletService(); 