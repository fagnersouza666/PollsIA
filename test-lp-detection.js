/**
 * üîç TESTE MANUAL DAS 5 ESTRAT√âGIAS DE DETEC√á√ÉO LP
 * 
 * Este script testa as novas estrat√©gias implementadas para detectar
 * posi√ß√µes de liquidez REAIS na blockchain Solana
 */

const axios = require('axios');

const BACKEND_URL = 'http://localhost:3001/api';

// Carteiras de teste (algumas conhecidas por ter LP positions)
const TEST_WALLETS = [
    // Wallet com posi√ß√µes LP conhecidas
    '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R', // Raydium team wallet
    '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', // Orca team wallet  
    'DuASG5ubHN6qsBCGJVfLa5G5TjDQ48TJ3XcZ8U6eDee', // Active LP provider
    '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1', // Another LP provider
];

async function testLPDetection() {
    console.log('üöÄ INICIANDO TESTE DAS 5 ESTRAT√âGIAS DE DETEC√á√ÉO LP\n');
    console.log('‚ïê'.repeat(80));

    for (const wallet of TEST_WALLETS) {
        console.log(`\nüîç TESTANDO WALLET: ${wallet}`);
        console.log('‚îÄ'.repeat(60));

        try {
            // 1. Testar detec√ß√£o de posi√ß√µes LP
            console.log('üìç 1. Testando getPositions (5 estrat√©gias)...');
            const positionsResponse = await axios.get(`${BACKEND_URL}/wallet/${wallet}/positions`);
            const positions = positionsResponse.data.data || [];

            console.log(`   ‚úÖ Encontradas ${positions.length} posi√ß√µes LP:`);
            positions.forEach((pos, i) => {
                console.log(`   ${i + 1}. ${pos.tokenA}/${pos.tokenB} - $${pos.value?.toFixed(2) || '0'} (APY: ${pos.apy?.toFixed(1) || '0'}%)`);
            });

            // 2. Testar wallet pools
            console.log('\nüìç 2. Testando getWalletPools...');
            const poolsResponse = await axios.get(`${BACKEND_URL}/wallet/${wallet}/pools`);
            const pools = poolsResponse.data.data || [];

            console.log(`   ‚úÖ Encontrados ${pools.length} pools na carteira`);

            // 3. Testar portfolio geral
            console.log('\nüìç 3. Testando getPortfolio...');
            const portfolioResponse = await axios.get(`${BACKEND_URL}/wallet/${wallet}/portfolio`);
            const portfolio = portfolioResponse.data.data || {};

            console.log(`   ‚úÖ Portfolio total: $${portfolio.totalValue?.toFixed(2) || '0'}`);
            console.log(`   ‚úÖ Balance SOL: ${portfolio.balance?.toFixed(4) || '0'} SOL`);

        } catch (error) {
            console.log(`   ‚ùå Erro: ${error.response?.data?.error || error.message}`);
        }

        console.log('‚îÄ'.repeat(60));
    }

    console.log('\nüéØ RESUMO DAS ESTRAT√âGIAS IMPLEMENTADAS:');
    console.log('‚ïê'.repeat(80));
    console.log('1. üîç ESTRAT√âGIA 1: An√°lise de LP Tokens na Carteira');
    console.log('   - Analisa token accounts buscando LP tokens');
    console.log('   - Verifica metadata e supply baixo');
    console.log('   - Identifica padr√µes como "TOKEN1-TOKEN2"');

    console.log('\n2. üîç ESTRAT√âGIA 2: An√°lise de Transa√ß√µes Recentes');
    console.log('   - Busca transa√ß√µes de addLiquidity/removeLiquidity');
    console.log('   - Identifica instru√ß√µes de protocolos LP');
    console.log('   - Extrai posi√ß√µes baseadas em hist√≥rico');

    console.log('\n3. üîç ESTRAT√âGIA 3: DexScreener API');
    console.log('   - Consulta API p√∫blica do DexScreener');
    console.log('   - Busca pairs associados √† carteira');
    console.log('   - N√£o requer API key');

    console.log('\n4. üîç ESTRAT√âGIA 4: Birdeye API (RECOMENDADO)');
    console.log('   - API premium com dados precisos');
    console.log('   - Requer BIRDEYE_API_KEY no .env');
    console.log('   - Melhor detec√ß√£o de posi√ß√µes LP');

    console.log('\n5. üîç ESTRAT√âGIA 5: Solscan Portfolio API');
    console.log('   - API p√∫blica do Solscan');
    console.log('   - Analisa tokens por padr√µes LP');
    console.log('   - Backup confi√°vel');

    console.log('\nüí° DICAS PARA MELHORAR A DETEC√á√ÉO:');
    console.log('‚ïê'.repeat(80));
    console.log('1. Configure BIRDEYE_API_KEY no .env para melhor precis√£o');
    console.log('2. Configure HELIUS_API_KEY para hist√≥rico detalhado');
    console.log('3. Use carteiras com atividade LP recente');
    console.log('4. Algumas posi√ß√µes podem estar em staking ou farming');
    console.log('5. LP tokens podem estar em wallets derivados');
}

// Executar teste
if (require.main === module) {
    testLPDetection().catch(console.error);
}

module.exports = { testLPDetection }; 